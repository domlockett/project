allEst<-function(respondents, catObjs=list()){
#the multiple cat objects must be of the same class and be in list form
store<-NULL
for (i in 1:length(catObjs)){
#apply theta basic to a set or respondents and return the values for every catObj provided by the user.
store<-(cbind(apply(respondents,1,  thetaBasic, catObj=catObjs[[i]]),store))
}
colnames(store)<-  paste("Theta", 1:length(catObjs), sep = " ")
return(store)
}
catPlot<-function(catObj,item=1,model="ICC"){
linecolors<-c(col=rgb(51/255, 153/255, 102/255), rgb(0/255, 102/255, 204/255),
rgb(204/255, 102/255, 153/255), col= rgb(102/255, 0/255, 102/255),
col=rgb(204/255, 51/255, 0/255),
## Above is the customizable part. Codes below return randomized colors.
sapply(c(1:1000),function(i){return(col=rgb(
sample(100:255,1)/255,sample(100:255,1)/255,sample(100:255,1)/255))}))
ltys<-c(1:16)
x<-seq(-5,5,.1)
if(model=="IIF"){ipr<-sapply(x,fisherInf, catObj=catObj, item=item)
par(mar=c(3,3,2,9),mgp=c(1.5,0,0))
plot(x,ipr,"l", main="Item Information Function",col=linecolors[3],
ylab=expression(I(theta)),xlab=expression(theta), lwd=2,
xlim=c(-5,5), ylim=c(0,max(ipr)), tck=F,cex.axis=.90, las=1)
legend("left",  inset=c(1,1.2), xpd=TRUE, bty="n", legend=paste("Item",item),col=linecolors[3], lty=1, cex=0.8)}
else{ipr<-as.matrix(sapply(x,probability, catObj=catObj, item))
if((catObj@model=="grm")|(catObj@model=="gpcm")){
ipr<-t(ipr)[,2:(nrow(ipr)-1)]}
if(model=="ICC"){ipr<-as.matrix(sapply(1:nrow(ipr),function(i)weighted.mean(ipr[i,],1:ncol(ipr))))}
if(model=="IRF"){x<-x[2:length(x)]
ipr<-10*as.matrix(sapply(1:(nrow(ipr)-1),function(i){return(abs(ipr[i+1,]-ipr[i,]))}))
if(catObj@model=="grm"|catObj@model=="gpcm"){ipr<-t(ipr)}}
par(mar=c(3,3,2,9),mgp=c(1.5,0,0))
plot(c(),c(),"l", main=paste(model,"Plot"),ylab="Probability", xlab=expression(theta),
lwd=2, xlim=c(-5,5), ylim=c(0,max(ipr)), las=1, tck=F,cex.axis=.90)
sapply(1:(ncol(ipr)),function(i){lines(x,ipr[,i],col=linecolors[i],lty=ltys[i], lwd=2)})
if(model=="ICC"){legend("left",  inset=c(1,1.2), xpd=TRUE, bty="n", legend=paste("Item",item), col=linecolors[1], lty=1 , cex=0.8)}}
if(model=="IRF"){legend("left",  inset=c(1,1.2), xpd=TRUE, bty="n",legend=sapply(1:ncol(ipr),function(i)paste("Response", i,sep=" ")), col=linecolors[1:ncol(ipr)], lty=ltys[1:ncol(ipr)] , cex=0.8)}}
thetaBasic<- function(catObj, answers=c()){
cat<-storeAnswer(catObj,item=selectItem(catObj)$next_item, answers[selectItem(catObj)$next_item])
#^call on an catObj with no answers to know which question is first; store it
while (checkStopRules(cat)==F) {
#^rerun the next 2 lines until the rules we set are met
cat<-storeAnswer(cat, item=selectItem(cat)$next_item, answers[selectItem(cat)$next_item])
# ^now call on the catObj with 1 question/answer and rerun until checkStopRules completed
}
theta_est<-(estimateTheta(cat))
#theta_est<-list(estimateTheta(cat), getAnswers(cat) )
#we can verify the estimates by adding answers to our output we would then plug those answers into ltm_cat and check with estimateTheta
return(theta_est)
}
makeTree <- function(catObj, flat = FALSE){
qlist<-names(catObj@discrimination) ## qlist is a vector of questions
if(length(unique(qlist))!=length(qlist)){ ## If names of questions are not unique,
qlist<-sapply(1:length(qlist),function(x)paste("Q",x,sep=""))} ## assign question numbers
## nresp is a vector of the number of possible responses for each question
nresp<-sapply(1:length(qlist),function(x)length(catObj@difficulty[[x]])+2)
## rlist is a matrix of possible responses for every question
if(catObj@model=="ltm"|catObj@model=="tpm"){
rlist<-sapply(1:length(qlist),function(x){c(-1:(nresp[x]-2), "Next")})}
else{rlist<-sapply(1:length(qlist),function(x){c(-1, 1:(nresp[x]-1), "Next", rep(NA,max(nresp)-(nresp)[x]))})}
## Variables defined above are always fixed and not to be modified below
recursiveTree<-function(catObj, output, currentq){  ## To be recursively called
## For this call, = for this response, what is the question to be answered?
## Assign that question as an element, "Next", for current output as a list.
output<-list(Next=qlist[selectItem(catObj)$next_item])
for (i in 1:nresp[[currentq]]){ ## Loop: for each possible response
nextcat<-storeAnswer(catObj,currentq,as.numeric(rlist[i,currentq])) ## Predict next call
## i.e. if your answer to current question is 'i', how would your catObj look in next call?
if(checkStopRules(nextcat)|sum(is.na(nextcat@answers))==1|catObj@lengthThreshold==sum(!is.na(nextcat@answers))){
## Add any condition you would like to break the recursive call.
## 'sum(is.na(nextcat@answers))==1' was added to end recursive call when
## there will be no more question to be answered in the next call.
## Note: '-1' does not count toward length threshold,
## which results in massive computation in many cases(refer to Cat.cpp).
## For 15 questions, imagine starting the function from
##  -1*15 and then -1*14+0, -1*14+1,... and on and on.
## You might want to restrict total number of questions to be asked
## for when the responses are massive combinations of '-1's.
output[[rlist[i,currentq]]]<-list(Next=qlist[selectItem(nextcat)$next_item])
## If one of the conditions is TRUE, don't call recursiveTree,
## and store the next question if your response to current question is 'i'.
}
else{ ## If not, move on to next question with 'nextcat',
## with the current response, 'i', as a list of current output, which will be the new output
## for the next call. For the next call, 'selectItem(nextcat)$next_item)' will be
## the question under consideration.
output[[rlist[i,currentq]]]<-
recursiveTree(catObj=nextcat, output=output[[rlist[i,currentq]]],
currentq=selectItem(nextcat)$next_item)
}
}
return(output) ## Upon finishing all of the recursive calls, return output.
}
## Now that we have the recursive function, start the process with inputs for makeTree()
tree<-recursiveTree(catObj=catObj,output=list(),currentq=selectItem(catObj)$next_item)
## Flat type of the function (below) is copied from the previous version,
## with changes in the names of variables as I coded above.
## Important note: flat option doesn't work unless catObj@model has binary responses.
## flatten the tree or leave it as list of lists
if(flat == FALSE){
out <- tree
}else{
flattenTree <- function(tree){
flatTree <- unlist(tree)
names(flatTree) <- gsub("Next", "", names(flatTree))
flatTree <- flatTree[order(nchar(names(flatTree)))]
if(catObj@model == "ltm" | catObj@model == "tpm"){
ans_choices <- c("-", 0:(nresp[1] - 2))
} else {
ans_choices <- c("-", 1:(nresp[1] - 1))
}
orderedTree <- flatTree[1]
for(i in ans_choices[1:length(ans_choices)]){
answers <- rep(NA, (length(flatTree)-1)/length(ans_choices))
answers <- flatTree[substring(names(flatTree), 1, 1) == i]
orderedTree <- c(orderedTree, answers)
}
flatTree <- orderedTree
response_list <- strsplit(names(flatTree), "[.]")
output <- matrix(data = NA, nrow = length(flatTree), ncol = length(catObj@answers) + 1)
colnames(output) <- c(qlist, "NextItem")
for(i in 1:length(flatTree)){
output[i,ncol(output)] <- flatTree[i]
if(i > 1){
output[i, output[1, ncol(output)]] <- response_list[[i]][1]
if(length(response_list[[i]]) > 1){
for(j in 1:(length(response_list[[i]])-1)){
output[i, flatTree[which(sapply(1:length(response_list), function(f)
identical(response_list[[f]], response_list[[i]][1:j])))]]  <- response_list[[i]][j+1]
}
}
}
}
output <- as.table(as.matrix(output))
return(output)
}
out <- flattenTree(tree)
}
return(out)
}
# live tests
library(catSurv)
####catPlot####
#test
catPlot(ltm_cat,item=8,model="ICC")
catPlot(ltm_cat,item=8,model="IRF")
catPlot(ltm_cat,item=8,model="IIF")
catPlot(grm_cat,item=8,model="ICC")
catPlot(grm_cat,item=8,model="IIF")
####thetaBasic####
#sample answers
answers<-rbind(sample(c(1:4),40,replace=T),sample(c(1:4),40,replace=T))
catPlot(grm_cat,item=8,model="IRF")
binary_answers<-sample(c(0:1),40,replace=T)
tpm_answers<-sample(c(0:1),40,replace=T)
# set some thresholds so we have checkStopRules
ltm_cat@lengthThreshold<-4
grm_cat@lengthThreshold<-4
gpcm_cat@lengthThreshold<-4
tpm_cat@lengthThreshold<-4
#test function
thetaBasic(ltm_cat, binary_answers)
thetaBasic(grm_cat, answers)
thetaBasic(gpcm_cat, answers)
thetaBasic(tpm_cat, tpm_answers)
####allEst####
#sample answers
respondents<-rbind(sample(c(1:4),40,replace=T),sample(c(1:4),40,replace=T),sample(c(1:4),40,replace=T),sample(c(1:4),40,replace=T),sample(c(1:4),40,replace=T))
rownames(respondents)<-c("r1","r2","r3","r4","r5")
respondents_ltm<-rbind(sample(0:1,40, replace=T),sample(0:1,40, replace=T),sample(0:1,40, replace=T),sample(0:1,40, replace=T),sample(0:1,40, replace=T))
respondents_tpm<-rbind(sample(0:1,20, replace=T),sample(0:1,20, replace=T),sample(0:1,20, replace=T),sample(0:1,20, replace=T),sample(0:1,20, replace=T))
# multiple catObjects
grm_MAP<-grm_cat
grm_MAP@estimation<-"MAP"
grm_EAP<-grm_cat
grm_EAP@estimation<-"EAP"
grm<-list(grm_MAP, grm_EAP)
gpcm_MAP<-gpcm_cat
gpcm_MAP@estimation<-"MAP"
gpcm_EAP<-gpcm_cat
gpcm_EAP@estimation<-"EAP"
gpcm<-list(grm_MAP, grm_EAP)
ltm_MAP<-ltm_cat
ltm_MAP@estimation<-"MAP"
ltm_EAP<-ltm_cat
ltm_EAP@estimation<-"EAP"
ltm_WLE<-ltm_cat
ltm_WLE@estimation<-"WLE"
ltm<-list(ltm_MAP, ltm_EAP, ltm_WLE)
tpm_MAP<-tpm_cat
tpm_MAP@estimation<-"MAP"
tpm_EAP<-tpm_cat
tpm_WLE<-tpm_cat
tpm_EAP@estimation<-"EAP"
tpm_WLE@estimation<-"WLE"
tpm<-list(tpm_MAP, tpm_EAP, tpm_WLE)
allEst(respondents_ltm,ltm)
allEst(respondents, grm)
allEst(respondents_tpm, tpm)
allEst(respondents, gpcm)
ltm_cat@lengthThreshold<-3
catSurv::makeTree(ltm_cat,flat=T)
